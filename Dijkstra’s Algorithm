#include <stdio.h>
#define INF 9999
#define MAX 20

void dijkstra(int G[MAX][MAX], int n, int start) {
    int cost[MAX][MAX], dist[MAX], visited[MAX], count, mindist, nextnode, i, j;
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            if(G[i][j] == 0)
                cost[i][j] = INF;
            else
                cost[i][j] = G[i][j];
    for(i = 0; i < n; i++) {
        dist[i] = cost[start][i];
        visited[i] = 0;
    }
    dist[start] = 0;
    visited[start] = 1;
    count = 1;
    while(count < n - 1) {
        mindist = INF;
        for(i = 0; i < n; i++)
            if(dist[i] < mindist && !visited[i]) {
                mindist = dist[i];
                nextnode = i;
            }
        visited[nextnode] = 1;
        for(i = 0; i < n; i++)
            if(!visited[i])
                if(mindist + cost[nextnode][i] < dist[i])
                    dist[i] = mindist + cost[nextnode][i];
        count++;
    }
    printf("Vertex\tDistance from Source\n");
    for(i = 0; i < n; i++)
        printf("%d\t%d\n", i, dist[i]);
}

int main() {
    int G[MAX][MAX], i, j, n, start;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            scanf("%d", &G[i][j]);
    printf("Enter starting vertex: ");
    scanf("%d", &start);
    dijkstra(G, n, start);
    return 0;
}
