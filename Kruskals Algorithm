#include <stdio.h>
#define MAX 30

int parent[MAX];

int find(int i) {
    while(parent[i] != i)
        i = parent[i];
    return i;
}

void union1(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskal(int n, int cost[MAX][MAX]) {
    int min, a, b, u, v, i, j, ne = 1, mincost = 0;
    for(i = 0; i < n; i++)
        parent[i] = i;
    printf("Edge : Weight\n");
    while(ne < n) {
        min = 9999;
        for(i = 0; i < n; i++) {
            for(j = 0; j < n; j++) {
                if(cost[i][j] < min && find(i) != find(j)) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
            }
        }
        union1(u, v);
        printf("%d - %d : %d\n", a, b, min);
        mincost += min;
        cost[a][b] = cost[b][a] = 9999;
        ne++;
    }
    printf("Minimum Cost = %d\n", mincost);
}

int main() {
    int n, i, j, cost[MAX][MAX];
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);
    kruskal(n, cost);
    return 0;
}
